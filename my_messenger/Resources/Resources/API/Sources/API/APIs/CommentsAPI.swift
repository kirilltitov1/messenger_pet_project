//
// CommentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CommentsAPI {

    /**
     Remove a comment.
     
     - parameter mediaId: (path) The ID of the media resource. 
     - parameter commentId: (path) The ID of the comment entry. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mediaMediaIdCommentsCommentIdDelete(mediaId: String, commentId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: StatusResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return mediaMediaIdCommentsCommentIdDeleteWithRequestBuilder(mediaId: mediaId, commentId: commentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a comment.
     - DELETE /media/{media-id}/comments/{comment-id}
     - Remove a comment either on the authenticated user's media object or authored by the authenticated user. 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter mediaId: (path) The ID of the media resource. 
     - parameter commentId: (path) The ID of the comment entry. 
     - returns: RequestBuilder<StatusResponse> 
     */
    open class func mediaMediaIdCommentsCommentIdDeleteWithRequestBuilder(mediaId: String, commentId: String) -> RequestBuilder<StatusResponse> {
        var localVariablePath = "/media/{media-id}/comments/{comment-id}"
        let mediaIdPreEscape = "\(APIHelper.mapValueToPathItem(mediaId))"
        let mediaIdPostEscape = mediaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{media-id}", with: mediaIdPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{comment-id}", with: commentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StatusResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a list of recent comments on a media object.
     
     - parameter mediaId: (path) The ID of the media resource. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mediaMediaIdCommentsGet(mediaId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommentsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return mediaMediaIdCommentsGetWithRequestBuilder(mediaId: mediaId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of recent comments on a media object.
     - GET /media/{media-id}/comments
     - Get a list of recent comments on a media object.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter mediaId: (path) The ID of the media resource. 
     - returns: RequestBuilder<CommentsResponse> 
     */
    open class func mediaMediaIdCommentsGetWithRequestBuilder(mediaId: String) -> RequestBuilder<CommentsResponse> {
        var localVariablePath = "/media/{media-id}/comments"
        let mediaIdPreEscape = "\(APIHelper.mapValueToPathItem(mediaId))"
        let mediaIdPostEscape = mediaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{media-id}", with: mediaIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommentsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a comment on a media object.
     
     - parameter mediaId: (path) The ID of the media resource. 
     - parameter text: (query) Text to post as a comment on the media object as specified in &#x60;media-id&#x60;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mediaMediaIdCommentsPost(mediaId: String, text: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: StatusResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return mediaMediaIdCommentsPostWithRequestBuilder(mediaId: mediaId, text: text).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a comment on a media object.
     - POST /media/{media-id}/comments
     - Create a comment on a media object with the following rules:    * The total length of the comment cannot exceed 300 characters.   * The comment cannot contain more than 4 hashtags.   * The comment cannot contain more than 1 URL.   * The comment cannot consist of all capital letters. 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter mediaId: (path) The ID of the media resource. 
     - parameter text: (query) Text to post as a comment on the media object as specified in &#x60;media-id&#x60;. 
     - returns: RequestBuilder<StatusResponse> 
     */
    open class func mediaMediaIdCommentsPostWithRequestBuilder(mediaId: String, text: String) -> RequestBuilder<StatusResponse> {
        var localVariablePath = "/media/{media-id}/comments"
        let mediaIdPreEscape = "\(APIHelper.mapValueToPathItem(mediaId))"
        let mediaIdPostEscape = mediaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{media-id}", with: mediaIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "text": (wrappedValue: text.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StatusResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
