//
// LocationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LocationsAPI {

    /**
     Get information about a location.
     
     - parameter locationId: (path) The location ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func locationsLocationIdGet(locationId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LocationInfoResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return locationsLocationIdGetWithRequestBuilder(locationId: locationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get information about a location.
     - GET /locations/{location-id}
     - Get information about a location.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter locationId: (path) The location ID. 
     - returns: RequestBuilder<LocationInfoResponse> 
     */
    open class func locationsLocationIdGetWithRequestBuilder(locationId: String) -> RequestBuilder<LocationInfoResponse> {
        var localVariablePath = "/locations/{location-id}"
        let locationIdPreEscape = "\(APIHelper.mapValueToPathItem(locationId))"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{location-id}", with: locationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LocationInfoResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a list of recent media objects from a given location.
     
     - parameter locationId: (path) The location ID. 
     - parameter minTimestamp: (query) Return media after this UNIX timestamp. (optional)
     - parameter maxTimestamp: (query) Return media before this UNIX timestamp. (optional)
     - parameter minId: (query) Return media before this &#x60;min_id&#x60;. (optional)
     - parameter maxId: (query) Return media after this &#x60;max_id&#x60;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func locationsLocationIdMediaRecentGet(locationId: String, minTimestamp: Int64? = nil, maxTimestamp: Int64? = nil, minId: String? = nil, maxId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return locationsLocationIdMediaRecentGetWithRequestBuilder(locationId: locationId, minTimestamp: minTimestamp, maxTimestamp: maxTimestamp, minId: minId, maxId: maxId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of recent media objects from a given location.
     - GET /locations/{location-id}/media/recent
     - Get a list of recent media objects from a given location.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter locationId: (path) The location ID. 
     - parameter minTimestamp: (query) Return media after this UNIX timestamp. (optional)
     - parameter maxTimestamp: (query) Return media before this UNIX timestamp. (optional)
     - parameter minId: (query) Return media before this &#x60;min_id&#x60;. (optional)
     - parameter maxId: (query) Return media after this &#x60;max_id&#x60;. (optional)
     - returns: RequestBuilder<MediaListResponse> 
     */
    open class func locationsLocationIdMediaRecentGetWithRequestBuilder(locationId: String, minTimestamp: Int64? = nil, maxTimestamp: Int64? = nil, minId: String? = nil, maxId: String? = nil) -> RequestBuilder<MediaListResponse> {
        var localVariablePath = "/locations/{location-id}/media/recent"
        let locationIdPreEscape = "\(APIHelper.mapValueToPathItem(locationId))"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{location-id}", with: locationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "min_timestamp": (wrappedValue: minTimestamp?.encodeToJSON(), isExplode: false),
            "max_timestamp": (wrappedValue: maxTimestamp?.encodeToJSON(), isExplode: false),
            "min_id": (wrappedValue: minId?.encodeToJSON(), isExplode: false),
            "max_id": (wrappedValue: maxId?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search for a location by geographic coordinate.
     
     - parameter distance: (query) Default is 1000m (distance&#x3D;1000), max distance is 5000. (optional)
     - parameter facebookPlacesId: (query) Returns a location mapped off of a Facebook places id. If used, a Foursquare id and &#x60;lat&#x60;, &#x60;lng&#x60; are not required. (optional)
     - parameter foursquareId: (query) Returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API.  (optional)
     - parameter lat: (query) Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (optional)
     - parameter lng: (query) Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (optional)
     - parameter foursquareV2Id: (query) Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func locationsSearchGet(distance: Int? = nil, facebookPlacesId: String? = nil, foursquareId: String? = nil, lat: Double? = nil, lng: Double? = nil, foursquareV2Id: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LocationSearchResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return locationsSearchGetWithRequestBuilder(distance: distance, facebookPlacesId: facebookPlacesId, foursquareId: foursquareId, lat: lat, lng: lng, foursquareV2Id: foursquareV2Id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search for a location by geographic coordinate.
     - GET /locations/search
     - Search for a location by geographic coordinate.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter distance: (query) Default is 1000m (distance&#x3D;1000), max distance is 5000. (optional)
     - parameter facebookPlacesId: (query) Returns a location mapped off of a Facebook places id. If used, a Foursquare id and &#x60;lat&#x60;, &#x60;lng&#x60; are not required. (optional)
     - parameter foursquareId: (query) Returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API.  (optional)
     - parameter lat: (query) Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (optional)
     - parameter lng: (query) Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (optional)
     - parameter foursquareV2Id: (query) Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;.  (optional)
     - returns: RequestBuilder<LocationSearchResponse> 
     */
    open class func locationsSearchGetWithRequestBuilder(distance: Int? = nil, facebookPlacesId: String? = nil, foursquareId: String? = nil, lat: Double? = nil, lng: Double? = nil, foursquareV2Id: String? = nil) -> RequestBuilder<LocationSearchResponse> {
        let localVariablePath = "/locations/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "distance": (wrappedValue: distance?.encodeToJSON(), isExplode: false),
            "facebook_places_id": (wrappedValue: facebookPlacesId?.encodeToJSON(), isExplode: false),
            "foursquare_id": (wrappedValue: foursquareId?.encodeToJSON(), isExplode: false),
            "lat": (wrappedValue: lat?.encodeToJSON(), isExplode: false),
            "lng": (wrappedValue: lng?.encodeToJSON(), isExplode: false),
            "foursquare_v2_id": (wrappedValue: foursquareV2Id?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LocationSearchResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
