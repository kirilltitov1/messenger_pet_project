//
// MediaAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MediaAPI {

    /**
     Get information about a media object.
     
     - parameter mediaId: (path) The ID of the media resource. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mediaMediaIdGet(mediaId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaEntryResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return mediaMediaIdGetWithRequestBuilder(mediaId: mediaId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get information about a media object.
     - GET /media/{media-id}
     - Get information about a media object. The returned type key will allow you to differentiate between image and video media.  **Note:** if you authenticate with an OAuth Token, you will receive the user_has_liked key which quickly tells you whether the current user has liked this media item. 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter mediaId: (path) The ID of the media resource. 
     - returns: RequestBuilder<MediaEntryResponse> 
     */
    open class func mediaMediaIdGetWithRequestBuilder(mediaId: String) -> RequestBuilder<MediaEntryResponse> {
        var localVariablePath = "/media/{media-id}"
        let mediaIdPreEscape = "\(APIHelper.mapValueToPathItem(mediaId))"
        let mediaIdPostEscape = mediaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{media-id}", with: mediaIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaEntryResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a list of currently popular media.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func mediaPopularGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaSearchResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return mediaPopularGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of currently popular media.
     - GET /media/popular
     - Get a list of what media is most popular at the moment. Can return mix of `image` and `video` types.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - returns: RequestBuilder<MediaSearchResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func mediaPopularGetWithRequestBuilder() -> RequestBuilder<MediaSearchResponse> {
        let localVariablePath = "/media/popular"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaSearchResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search for media in a given area.
     
     - parameter lat: (query) Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. 
     - parameter lng: (query) Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. 
     - parameter minTimestamp: (query) A unix timestamp. All media returned will be taken later than this timestamp. (optional)
     - parameter maxTimestamp: (query) A unix timestamp. All media returned will be taken earlier than this timestamp. (optional)
     - parameter distance: (query) Default is 1km (distance&#x3D;1000), max distance is 5km. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mediaSearchGet(lat: Double, lng: Double, minTimestamp: Int64? = nil, maxTimestamp: Int64? = nil, distance: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaSearchResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return mediaSearchGetWithRequestBuilder(lat: lat, lng: lng, minTimestamp: minTimestamp, maxTimestamp: maxTimestamp, distance: distance).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search for media in a given area.
     - GET /media/search
     - Search for media in a given area. The default time span is set to 5 days. The time span must not exceed 7 days. Defaults time stamps cover the last 5 days. Can return mix of `image` and `video` types. 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter lat: (query) Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. 
     - parameter lng: (query) Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. 
     - parameter minTimestamp: (query) A unix timestamp. All media returned will be taken later than this timestamp. (optional)
     - parameter maxTimestamp: (query) A unix timestamp. All media returned will be taken earlier than this timestamp. (optional)
     - parameter distance: (query) Default is 1km (distance&#x3D;1000), max distance is 5km. (optional)
     - returns: RequestBuilder<MediaSearchResponse> 
     */
    open class func mediaSearchGetWithRequestBuilder(lat: Double, lng: Double, minTimestamp: Int64? = nil, maxTimestamp: Int64? = nil, distance: Int? = nil) -> RequestBuilder<MediaSearchResponse> {
        let localVariablePath = "/media/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "lat": (wrappedValue: lat.encodeToJSON(), isExplode: false),
            "lng": (wrappedValue: lng.encodeToJSON(), isExplode: false),
            "min_timestamp": (wrappedValue: minTimestamp?.encodeToJSON(), isExplode: false),
            "max_timestamp": (wrappedValue: maxTimestamp?.encodeToJSON(), isExplode: false),
            "distance": (wrappedValue: distance?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaSearchResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get information about a media object.
     
     - parameter shortcode: (path) The short code of the media resource. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mediaShortcodeShortcodeGet(shortcode: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaEntryResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return mediaShortcodeShortcodeGetWithRequestBuilder(shortcode: shortcode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get information about a media object.
     - GET /media/shortcode/{shortcode}
     - This endpoint returns the same response as `GET /media/{media-id}`.  A media object's shortcode can be found in its shortlink URL. An example shortlink is `http://instagram.com/p/D/`, its corresponding shortcode is `D`. 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter shortcode: (path) The short code of the media resource. 
     - returns: RequestBuilder<MediaEntryResponse> 
     */
    open class func mediaShortcodeShortcodeGetWithRequestBuilder(shortcode: String) -> RequestBuilder<MediaEntryResponse> {
        var localVariablePath = "/media/shortcode/{shortcode}"
        let shortcodePreEscape = "\(APIHelper.mapValueToPathItem(shortcode))"
        let shortcodePostEscape = shortcodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shortcode}", with: shortcodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaEntryResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
