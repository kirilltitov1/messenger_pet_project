//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UsersAPI {

    /**
     Search for a user by name.
     
     - parameter q: (query) A query string. 
     - parameter count: (query) Number of users to return. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersSearchGet(q: String, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsersInfoResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return usersSearchGetWithRequestBuilder(q: q, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search for a user by name.
     - GET /users/search
     - Search for a user by name.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter q: (query) A query string. 
     - parameter count: (query) Number of users to return. (optional)
     - returns: RequestBuilder<UsersInfoResponse> 
     */
    open class func usersSearchGetWithRequestBuilder(q: String, count: Int? = nil) -> RequestBuilder<UsersInfoResponse> {
        let localVariablePath = "/users/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": (wrappedValue: q.encodeToJSON(), isExplode: false),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersInfoResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     See the authenticated user's feed.
     
     - parameter count: (query) Count of media to return. (optional)
     - parameter minId: (query) Return media later than this &#x60;min_id&#x60;. (optional)
     - parameter maxId: (query) Return media earlier than this &#x60;max_id&#x60;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func usersSelfFeedGet(count: Int? = nil, minId: String? = nil, maxId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return usersSelfFeedGetWithRequestBuilder(count: count, minId: minId, maxId: maxId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     See the authenticated user's feed.
     - GET /users/self/feed
     - See the authenticated user's feed.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter count: (query) Count of media to return. (optional)
     - parameter minId: (query) Return media later than this &#x60;min_id&#x60;. (optional)
     - parameter maxId: (query) Return media earlier than this &#x60;max_id&#x60;. (optional)
     - returns: RequestBuilder<MediaListResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func usersSelfFeedGetWithRequestBuilder(count: Int? = nil, minId: String? = nil, maxId: String? = nil) -> RequestBuilder<MediaListResponse> {
        let localVariablePath = "/users/self/feed"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: false),
            "min_id": (wrappedValue: minId?.encodeToJSON(), isExplode: false),
            "max_id": (wrappedValue: maxId?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     See the list of media liked by the authenticated user.
     
     - parameter count: (query) Count of media to return. (optional)
     - parameter maxLikeId: (query) Return media liked before this id. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersSelfMediaLikedGet(count: Int? = nil, maxLikeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return usersSelfMediaLikedGetWithRequestBuilder(count: count, maxLikeId: maxLikeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     See the list of media liked by the authenticated user.
     - GET /users/self/media/liked
     - See the list of media liked by the authenticated user. Private media is returned as long as the authenticated user has permission to view that media. Liked media lists are only available for the currently authenticated user. 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter count: (query) Count of media to return. (optional)
     - parameter maxLikeId: (query) Return media liked before this id. (optional)
     - returns: RequestBuilder<MediaListResponse> 
     */
    open class func usersSelfMediaLikedGetWithRequestBuilder(count: Int? = nil, maxLikeId: String? = nil) -> RequestBuilder<MediaListResponse> {
        let localVariablePath = "/users/self/media/liked"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: false),
            "max_like_id": (wrappedValue: maxLikeId?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get basic information about a user.
     
     - parameter userId: (path) The ID of a user to get information about, or **self** to retrieve information about authenticated user. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersUserIdGet(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return usersUserIdGetWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get basic information about a user.
     - GET /users/{user-id}
     - Get basic information about a user. To get information about the owner of the access token, you can use **self** instead of the `user-id`.  Security scope `public_content` is required to read information about other users. 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter userId: (path) The ID of a user to get information about, or **self** to retrieve information about authenticated user. 
     - returns: RequestBuilder<UserResponse> 
     */
    open class func usersUserIdGetWithRequestBuilder(userId: String) -> RequestBuilder<UserResponse> {
        var localVariablePath = "/users/{user-id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user-id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get the most recent media published by a user.
     
     - parameter userId: (path) The ID of a user to get recent media of, or **self** to retrieve media of authenticated user. 
     - parameter count: (query) Count of media to return. (optional)
     - parameter maxTimestamp: (query) Return media before this UNIX timestamp. (optional)
     - parameter minTimestamp: (query) Return media after this UNIX timestamp. (optional)
     - parameter minId: (query) Return media later than this &#x60;min_id&#x60;. (optional)
     - parameter maxId: (query) Return media earlier than this &#x60;max_id&#x60;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersUserIdMediaRecentGet(userId: String, count: Int? = nil, maxTimestamp: Int64? = nil, minTimestamp: Int64? = nil, minId: String? = nil, maxId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return usersUserIdMediaRecentGetWithRequestBuilder(userId: userId, count: count, maxTimestamp: maxTimestamp, minTimestamp: minTimestamp, minId: minId, maxId: maxId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the most recent media published by a user.
     - GET /users/{user-id}/media/recent
     - Get the most recent media published by a user. To get the most recent media published by the owner of the access token, you can use **self** instead of the `user-id`.  Security scope `public_content` is required to read information about other users. 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter userId: (path) The ID of a user to get recent media of, or **self** to retrieve media of authenticated user. 
     - parameter count: (query) Count of media to return. (optional)
     - parameter maxTimestamp: (query) Return media before this UNIX timestamp. (optional)
     - parameter minTimestamp: (query) Return media after this UNIX timestamp. (optional)
     - parameter minId: (query) Return media later than this &#x60;min_id&#x60;. (optional)
     - parameter maxId: (query) Return media earlier than this &#x60;max_id&#x60;. (optional)
     - returns: RequestBuilder<MediaListResponse> 
     */
    open class func usersUserIdMediaRecentGetWithRequestBuilder(userId: String, count: Int? = nil, maxTimestamp: Int64? = nil, minTimestamp: Int64? = nil, minId: String? = nil, maxId: String? = nil) -> RequestBuilder<MediaListResponse> {
        var localVariablePath = "/users/{user-id}/media/recent"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user-id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: false),
            "max_timestamp": (wrappedValue: maxTimestamp?.encodeToJSON(), isExplode: false),
            "min_timestamp": (wrappedValue: minTimestamp?.encodeToJSON(), isExplode: false),
            "min_id": (wrappedValue: minId?.encodeToJSON(), isExplode: false),
            "max_id": (wrappedValue: maxId?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
