//
// TagsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TagsAPI {

    /**
     Search for tags by name.
     
     - parameter q: (query) A valid tag name without a leading \\#. (eg. snowy, nofilter) 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tagsSearchGet(q: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TagSearchResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return tagsSearchGetWithRequestBuilder(q: q).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search for tags by name.
     - GET /tags/search
     - Search for tags by name.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter q: (query) A valid tag name without a leading \\#. (eg. snowy, nofilter) 
     - returns: RequestBuilder<TagSearchResponse> 
     */
    open class func tagsSearchGetWithRequestBuilder(q: String) -> RequestBuilder<TagSearchResponse> {
        let localVariablePath = "/tags/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": (wrappedValue: q.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TagSearchResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get information about a tag object.
     
     - parameter tagName: (path) The tag name. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tagsTagNameGet(tagName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TagInfoResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return tagsTagNameGetWithRequestBuilder(tagName: tagName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get information about a tag object.
     - GET /tags/{tag-name}
     - Get information about a tag object.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter tagName: (path) The tag name. 
     - returns: RequestBuilder<TagInfoResponse> 
     */
    open class func tagsTagNameGetWithRequestBuilder(tagName: String) -> RequestBuilder<TagInfoResponse> {
        var localVariablePath = "/tags/{tag-name}"
        let tagNamePreEscape = "\(APIHelper.mapValueToPathItem(tagName))"
        let tagNamePostEscape = tagNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tag-name}", with: tagNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TagInfoResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a list of recently tagged media.
     
     - parameter tagName: (path) The tag name. 
     - parameter count: (query) Count of tagged media to return. (optional)
     - parameter minTagId: (query) Return media before this &#x60;min_tag_id&#x60;. (optional)
     - parameter maxTagId: (query) Return media after this &#x60;max_tag_id&#x60;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func tagsTagNameMediaRecentGet(tagName: String, count: Int? = nil, minTagId: String? = nil, maxTagId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TagMediaListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return tagsTagNameMediaRecentGetWithRequestBuilder(tagName: tagName, count: count, minTagId: minTagId, maxTagId: maxTagId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of recently tagged media.
     - GET /tags/{tag-name}/media/recent
     - Get a list of recently tagged media. Use the `max_tag_id` and `min_tag_id` parameters in the pagination response to paginate through these objects. 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: instagram_auth
     - parameter tagName: (path) The tag name. 
     - parameter count: (query) Count of tagged media to return. (optional)
     - parameter minTagId: (query) Return media before this &#x60;min_tag_id&#x60;. (optional)
     - parameter maxTagId: (query) Return media after this &#x60;max_tag_id&#x60;. (optional)
     - returns: RequestBuilder<TagMediaListResponse> 
     */
    open class func tagsTagNameMediaRecentGetWithRequestBuilder(tagName: String, count: Int? = nil, minTagId: String? = nil, maxTagId: String? = nil) -> RequestBuilder<TagMediaListResponse> {
        var localVariablePath = "/tags/{tag-name}/media/recent"
        let tagNamePreEscape = "\(APIHelper.mapValueToPathItem(tagName))"
        let tagNamePostEscape = tagNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tag-name}", with: tagNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: false),
            "min_tag_id": (wrappedValue: minTagId?.encodeToJSON(), isExplode: false),
            "max_tag_id": (wrappedValue: maxTagId?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TagMediaListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
