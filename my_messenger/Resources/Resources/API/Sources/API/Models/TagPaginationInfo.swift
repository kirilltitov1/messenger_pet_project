//
// TagPaginationInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TagPaginationInfo: Codable, JSONEncodable, Hashable {

    /** The max ID of a tag for the next page */
    public var nextMaxTagId: String?
    /** The deprication warning, if information is available */
    public var deprecationWarning: String?
    /** Depricated. Use min_tag_id instead */
    public var nextMaxId: String?
    /** Depricated. Use max_tag_id instead */
    public var nextMinId: String?
    /** The min ID of a tag for the next page */
    public var minTagId: String?
    /** URL to retrieve next page of entries */
    public var nextUrl: String?

    public init(nextMaxTagId: String? = nil, deprecationWarning: String? = nil, nextMaxId: String? = nil, nextMinId: String? = nil, minTagId: String? = nil, nextUrl: String? = nil) {
        self.nextMaxTagId = nextMaxTagId
        self.deprecationWarning = deprecationWarning
        self.nextMaxId = nextMaxId
        self.nextMinId = nextMinId
        self.minTagId = minTagId
        self.nextUrl = nextUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case nextMaxTagId = "next_max_tag_id"
        case deprecationWarning = "deprecation_warning"
        case nextMaxId = "next_max_id"
        case nextMinId = "next_min_id"
        case minTagId = "min_tag_id"
        case nextUrl = "next_url"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(nextMaxTagId, forKey: .nextMaxTagId)
        try container.encodeIfPresent(deprecationWarning, forKey: .deprecationWarning)
        try container.encodeIfPresent(nextMaxId, forKey: .nextMaxId)
        try container.encodeIfPresent(nextMinId, forKey: .nextMinId)
        try container.encodeIfPresent(minTagId, forKey: .minTagId)
        try container.encodeIfPresent(nextUrl, forKey: .nextUrl)
    }
}

