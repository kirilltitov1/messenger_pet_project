//
// MediaEntry.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MediaEntry: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case image = "image"
        case video = "video"
    }
    /** ??? Unknown ??? */
    public var attribution: String?
    /** ID of a media entry */
    public var id: String?
    /** Type of this media entry */
    public var type: ModelType?
    /** List of tags assigned to this media */
    public var tags: [String]?
    public var location: LocationInfo?
    public var comments: CommentsCollection?
    /** Filter of this media entry */
    public var filter: String?
    /** Media creation UNIX timestamp */
    public var createdTime: String?
    /** Fixed URL of this media entry */
    public var link: String?
    public var likes: LikesCollection?
    public var images: ImagesData?
    public var videos: VideosData?
    /** Users located on this media entry */
    public var usersInPhoto: [UserInPhoto]?
    public var caption: CaptionData?
    /** Indicates whether authenticated user has liked this media or not */
    public var userHasLiked: Bool?
    public var user: UserShortInfo?

    public init(attribution: String? = nil, id: String? = nil, type: ModelType? = nil, tags: [String]? = nil, location: LocationInfo? = nil, comments: CommentsCollection? = nil, filter: String? = nil, createdTime: String? = nil, link: String? = nil, likes: LikesCollection? = nil, images: ImagesData? = nil, videos: VideosData? = nil, usersInPhoto: [UserInPhoto]? = nil, caption: CaptionData? = nil, userHasLiked: Bool? = nil, user: UserShortInfo? = nil) {
        self.attribution = attribution
        self.id = id
        self.type = type
        self.tags = tags
        self.location = location
        self.comments = comments
        self.filter = filter
        self.createdTime = createdTime
        self.link = link
        self.likes = likes
        self.images = images
        self.videos = videos
        self.usersInPhoto = usersInPhoto
        self.caption = caption
        self.userHasLiked = userHasLiked
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attribution
        case id
        case type
        case tags
        case location
        case comments
        case filter
        case createdTime = "created_time"
        case link
        case likes
        case images
        case videos
        case usersInPhoto = "users_in_photo"
        case caption
        case userHasLiked = "user_has_liked"
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(attribution, forKey: .attribution)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(comments, forKey: .comments)
        try container.encodeIfPresent(filter, forKey: .filter)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(link, forKey: .link)
        try container.encodeIfPresent(likes, forKey: .likes)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(videos, forKey: .videos)
        try container.encodeIfPresent(usersInPhoto, forKey: .usersInPhoto)
        try container.encodeIfPresent(caption, forKey: .caption)
        try container.encodeIfPresent(userHasLiked, forKey: .userHasLiked)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

